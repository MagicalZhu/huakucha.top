// vite.config.ts
import path from "path";
import { defineConfig } from "vite";
import Vue from "@vitejs/plugin-vue";
import Pages from "vite-plugin-pages";
import generateSitemap from "vite-ssg-sitemap";
import Layouts from "vite-plugin-vue-layouts";
import Components from "unplugin-vue-components/vite";
import AutoImport from "unplugin-auto-import/vite";
import Markdown from "vite-plugin-vue-markdown";
import VueI18n from "@intlify/vite-plugin-vue-i18n";
import Inspect from "vite-plugin-inspect";
import Unocss from "unocss/vite";

// node/resolveBlog.ts
import { resolve } from "path";
import fs from "fs-extra";
import matter from "gray-matter";
import dayjs from "dayjs";
var __vite_injected_original_dirname = "/Users/yoey/Desktop/vitesseDoc/node";
var resolveBlogFile = (route) => {
  if (!route.path.startsWith("/posts") || route.path === "/posts")
    return;
  const path2 = resolve(__vite_injected_original_dirname, "..", route.component.slice(1));
  const md = fs.readFileSync(path2, "utf-8");
  const { content, data } = matter(md);
  route.meta = Object.assign(route.meta || {}, {
    path: route.path,
    frontmatter: data,
    layout: "post",
    date: route.path.substring(7, 17),
    readingTime: readingTime(content)
  });
  return route;
};
var resolveBlogList = (routes) => {
  const blogs = routes.filter((item) => item.meta?.layout === "post").map((item) => ({
    path: item.path,
    title: item.meta.frontmatter.title,
    date: item.meta.date
  })).sort((a, b) => dayjs(b.date).unix() - dayjs(a.date).unix());
  return routes.map((item) => {
    const i = blogs.findIndex((blog) => blog.path === item.path);
    item.meta = {
      ...item.meta,
      prev: i < blogs.length ? blogs[i + 1] : null,
      next: i > 0 ? blogs[i - 1] : null
    };
    return item;
  });
};

// node/readingTime.ts
var getNumCN = (text) => {
  return (text.match(/[\u4E00-\u9FA5]/g) || []).length;
};
var getNumEN = (text) => {
  return (text.replace(/[\u4E00-\u9FA5]/g, "").match(
    /[a-zA-Z0-9_\u0392-\u03C9\u0400-\u04FF]+|[\u4E00-\u9FFF\u3400-\u4DBF\uF900-\uFAFF\u3040-\u309F\uAC00-\uD7AF\u0400-\u04FF]+|[\u00E4\u00C4\u00E5\u00C5\u00F6\u00D6]+|\w+/g
  ) || []).length;
};
var excludeCodeBlock = (text) => {
  return text.replace(/```[\s\S]*?```/g, "");
};
var excludeTexBlock = (text) => {
  return text.replace(/\$\$[\s\S]*?\$\$/g, "");
};
var readingTime = (text, options) => {
  options = options || {};
  options.wordsPerMinuteCN = options.wordsPerMinuteCN || 300;
  options.wordsPerMinuteEN = options.wordsPerMinuteEN || 200;
  if (options.excludeCodeBlock)
    text = excludeCodeBlock(text);
  if (options.excludeTexBlock)
    text = excludeTexBlock(text);
  const cntCN = getNumCN(text || "");
  const cntEN = getNumEN(text || "");
  let minutes = cntCN / options.wordsPerMinuteCN + cntEN / options.wordsPerMinuteEN;
  minutes = minutes < 1 ? 1 : Math.ceil(Number(minutes.toFixed(2)));
  return {
    minutes,
    words: cntCN + cntEN
  };
};

// node/installMarkdownPlugins.ts
import Shiki from "markdown-it-shiki";
import LinkAttributes from "markdown-it-link-attributes";
import TOC from "markdown-it-table-of-contents";
import anchor from "markdown-it-anchor";
import { slugify } from "@renovamen/utils";
var installMarkdownPlugins = (md) => {
  md.use(Shiki, {
    theme: {
      light: "vitesse-light",
      dark: "vitesse-dark"
    }
  });
  md.use(anchor, {
    slugify,
    permalink: anchor.permalink.linkInsideHeader({
      symbol: "#",
      renderAttrs: () => ({ "aria-hidden": "true" })
    })
  });
  md.use(LinkAttributes, {
    matcher: (link) => /^https?:\/\//.test(link),
    attrs: {
      target: "_blank",
      rel: "noopener"
    }
  });
  md.use(TOC, {
    includeLevel: [1, 2, 3, 4, 5, 6],
    slugify
  });
};

// vite.config.ts
var __vite_injected_original_dirname2 = "/Users/yoey/Desktop/vitesseDoc";
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "~/": `${path.resolve(__vite_injected_original_dirname2, "src")}/`
    }
  },
  plugins: [
    Vue({
      include: [/\.vue$/, /\.md$/],
      reactivityTransform: true
    }),
    Pages({
      dirs: [
        { dir: "pages", baseRoute: "" }
      ],
      extensions: ["vue", "md", "js", "ts"],
      extendRoute: (route) => resolveBlogFile(route),
      onRoutesGenerated: (routes) => resolveBlogList(routes)
    }),
    Layouts(),
    AutoImport({
      imports: [
        "vue",
        "vue-router",
        "vue-i18n",
        "vue/macros",
        "@vueuse/head",
        "@vueuse/core"
      ],
      dts: "src/auto-imports.d.ts",
      dirs: [
        "src/composables",
        "src/store"
      ],
      vueTemplate: true
    }),
    Components({
      extensions: ["vue", "md"],
      include: [/\.vue$/, /\.vue\?vue/, /\.md$/],
      dts: "src/components.d.ts"
    }),
    Unocss(),
    Markdown({
      wrapperClasses: "prose prose-lg m-auto text-left",
      headEnabled: true,
      markdownItSetup: (md) => installMarkdownPlugins(md)
    }),
    VueI18n({
      runtimeOnly: true,
      compositionOnly: true,
      include: [path.resolve(__vite_injected_original_dirname2, "locales/**")]
    }),
    Inspect()
  ],
  ssgOptions: {
    script: "async",
    formatting: "minify",
    onFinished() {
      generateSitemap();
    }
  },
  ssr: {
    noExternal: ["workbox-window", /vue-i18n/]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
